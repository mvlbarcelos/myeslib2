package org.myeslib.jdbi.function.eventbus;

import com.google.common.eventbus.EventBus;
import org.myeslib.core.AggregateRoot;
import org.myeslib.core.Command;
import org.myeslib.core.Event;
import org.myeslib.function.InteractionContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.concurrent.NotThreadSafe;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static com.google.common.base.Preconditions.checkNotNull;

@NotThreadSafe
public class EventBusInteractionContext implements InteractionContext {

    private static final Logger logger = LoggerFactory.getLogger(EventBusInteractionContext.class);
    private final AggregateRoot aggregateRoot;
    private final EventBus bus;
    private final List<Event> events;
    private final List<Command> commands;

    public EventBusInteractionContext(AggregateRoot aggregateRoot) {
        this.bus = new EventBus();
        this.events = new ArrayList<>();
        this.commands = new ArrayList<>();
        checkNotNull(aggregateRoot);
        this.aggregateRoot = aggregateRoot;
        bus.register(aggregateRoot);
    }

    @Override
    public void apply(Event event) {
        checkNotNull(event);
        logger.debug("applying event {} generated by an operation on {}", event, aggregateRoot);
        bus.post(event);
        logger.debug("status after event applied {}", aggregateRoot);
        events.add(event);
    }

    public void emit(Command command) {
        checkNotNull(command);
        commands.add(command);
        logger.debug("emitted command {} generated by an operation on {}", command, aggregateRoot);
    }

    @Override
    public List<Event> getEvents() {
        bus.unregister(aggregateRoot);
        return Collections.unmodifiableList(events);
    }

    public List<Command> getCommands() {
        return Collections.unmodifiableList(commands);
    }

}
