package org.myeslib.jdbi.function;

import org.myeslib.core.AggregateRoot;
import org.myeslib.core.Command;
import org.myeslib.core.Event;
import org.myeslib.function.InteractionContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static com.google.common.base.Preconditions.checkNotNull;

public class MultiMethodInteractionContext implements InteractionContext {

    private static final Logger logger = LoggerFactory.getLogger(MultiMethodInteractionContext.class);
    private final AggregateRoot aggregateRoot;
    private final MultiMethod mm ;
    private final List<Event> events;
    private final List<Command> commands;

    public MultiMethodInteractionContext(AggregateRoot aggregateRoot) {
        this.mm = MultiMethod.getMultiMethod(aggregateRoot.getClass(), "on");
        this.events = new ArrayList<>();
        this.commands = new ArrayList<>();
        checkNotNull(aggregateRoot);
        this.aggregateRoot = aggregateRoot;
    }

    @Override
    public void apply(Event event) {
        checkNotNull(event);
        logger.debug("applying event {} generated by an operation on {}", event, aggregateRoot);
        _applyEventsOn(aggregateRoot, event);
        logger.debug("status after event applied {}", aggregateRoot);
        events.add(event);
    }

    @Override
    public List<Event> getEvents() {
        return Collections.unmodifiableList(events);
    }

    private void _applyEventsOn(AggregateRoot instance, Event event) {
        try {
            mm.invoke(instance, event);
        } catch (Exception e) {
            throw new RuntimeException("Error when executing with reflection", e.getCause());
        }
    }
}
